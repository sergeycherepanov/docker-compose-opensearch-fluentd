version: '3'
services:
  traefik:
    image: traefik:v2.10
    command:
      - "--ping=true"
      - "--log.level=ERROR"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.default.address=:80"
    networks:
      - 'opensearch'
    ports:
      - "${TRAEFIK_BIND_ADDRESS:-0.0.0.0}:${TRAEFIK_BIND_PORT:-80}:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.traefikapi.rule=PathPrefix(`/api/`) && HeadersRegexp(`Referer`, `^https?:\/\/.+\/traefik\/dashboard\/`)'
      - 'traefik.http.routers.traefikapi.entrypoints=default'
      - 'traefik.http.routers.traefikapi.service=api@internal'
      - 'traefik.http.routers.traefikapi.middlewares=traefik-auth'
      - 'traefik.http.routers.traefikdashboard.rule=PathPrefix(`/traefik/dashboard/`)'
      - 'traefik.http.routers.traefikdashboard.entrypoints=default'
      - 'traefik.http.routers.traefikdashboard.service=api@internal'
      - 'traefik.http.routers.traefikdashboard.middlewares=traefik-auth,traefik-stripprefix'
      - 'traefik.http.middlewares.traefik-stripprefix.stripprefix.prefixes=/traefik'
      - 'traefik.http.middlewares.traefik-auth.basicauth.users=admin:{SHA}0tTNr469Z7oY3fDRwNoUXE2vTBw='
    depends_on:
      opensearch-dashboards:
        condition: service_healthy
    healthcheck:
      test: traefik healthcheck --ping
      start_period: 5s
      interval: 5s
      retries: 30
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  fluentd:
    build: ./fluentd
    command: 'fluentd -c /fluentd/etc/fluentd.conf -v'
    volumes:
      - "./fluentd-pos:/fluentd/pos"
      - "./log:/fluentd/log"
      - "./fluentd.conf:/fluentd/etc/fluentd.conf"
    restart: "always"
    networks:
      - opensearch
    depends_on:
      opensearch-node1:
        condition: service_healthy
      opensearch-node2:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - opensearch # All of the containers will join the same Docker bridge network
    healthcheck:
      test: /bin/bash -c "</dev/tcp/localhost/9200"
      start_period: 5s
      interval: 5s
      retries: 30
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opensearch.entrypoints=default"
      - "traefik.http.routers.opensearch.rule=PathPrefix(`/`)"
      - "traefik.http.services.opensearch.loadbalancer.server.port=9200"
  opensearch-node2:
    image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
      #container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - opensearch
    healthcheck:
      test: /bin/bash -c "</dev/tcp/localhost/9200"
      start_period: 5s
      interval: 5s
      retries: 30
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opensearch.entrypoints=default"
      - "traefik.http.routers.opensearch.rule=PathPrefix(`/`)"
      - "traefik.http.services.opensearch.loadbalancer.server.port=9200"
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
      SERVER_BASEPATH: '/dashboard'
      SERVER_REWRITEBASEPATH: 'true'
    networks:
      - opensearch
    depends_on:
      opensearch-node1:
        condition: service_healthy
      opensearch-node2:
        condition: service_healthy
    healthcheck:
      test: /bin/bash -c "</dev/tcp/localhost/5601"
      start_period: 5s
      interval: 5s
      retries: 30
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboards.entrypoints=default"
      - "traefik.http.routers.dashboards.rule=PathPrefix(`/dashboards/`)"
      - "traefik.http.services.dashboards.loadbalancer.server.port=5601"

volumes:
  opensearch-data1:
  opensearch-data2:

networks:
  opensearch:
